name: Deploy EMR-SERVER to Lightsail

on:
  push:
    branches:
      - main # Trigger on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Lightsail IP to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.LIGHTSAIL_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to Lightsail
        run: |
          echo "Connecting to Lightsail instance..."
          
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIGHTSAIL_IP }} << 'EOF'
          echo "=== Starting deployment ==="
          
          # Navigate to project directory
          cd /home/ubuntu/EMR-SERVER || { echo "EMR-SERVER directory not found!"; exit 1; }
          
          echo "Current directory: $(pwd)"
          echo "Git status before pull:"
          git status
          
          # Pull latest changes
          echo "Pulling latest changes from main branch..."
          git pull origin main
          
          echo "Git status after pull:"
          git status
          
          echo "Latest commit:"
          git log -1 --oneline
          
          # Create/update .env file with secrets
          echo "Updating .env file..."
          cat > .env << 'ENV_EOF'
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          STORAGE_BUCKET_URL=${{ secrets.STORAGE_BUCKET_URL }}
          STORAGE_USERNAME=${{ secrets.STORAGE_USERNAME }}
          STORAGE_PASSWORD=${{ secrets.STORAGE_PASSWORD }}
          ENV_EOF
          
          echo ".env file updated"
          
          # Restart Docker containers with latest code
          echo "Restarting Docker containers..."
          docker compose down || true
          docker compose up --build -d
          
          echo "Checking container status:"
          docker compose ps
          
          echo "=== Deployment complete ==="
          EOF